name: "s"
description: ""
inputs:
  branch:
    description: "Branch name to progress the action"
    default: "main"
outputs:
  status:
    description: "Status of the action"
    value: ${{ steps.changed_files.outputs.status }}
runs:
  using: composite
  steps:
    # - name: Validate inputs
    #   shell: bash
    #   run: |
    #     if [ -z "${{ inputs.lang }}" ]; then
    #       echo "The lang input is required"
    #       exit 1
    #     fi

    # base_ref = target branch, head_ref = source branch
    # ref_name = current branch(workflow triggered by PR)
    # ---------------------------------------------------
    # if this action is triggered by a PR,
    # the base_ref is target branch
    # if this action is triggered by any other event,
    # the base_ref will be `null`
    # and head_ref will be the same
    # ---------------------------------------------------
    # dev  -> main(PR)
    # main -> main(push)
    # x    -> main(push)
    - name: Debug Refs
      shell: bash
      run: |
        echo ===========DEBUG REF===============
        echo "base_ref=${{ github.base_ref }}"
        echo "head_ref=${{ github.head_ref }}"
        echo "ref_name=${{ github.ref_name }}"
        echo "event_name=${{ github.event_name }}"
        echo "ref=${{ github.ref }}"
        echo "inputs.branch=${{ inputs.branch }}"
        echo ===================================

    - name: Setup Ref
      shell: bash
      # TODO: 
      run: |
        # 1. PR

        if [[ "${{ github.event_name }}" == "pull_request" ]]; then
          BASE_REF=${{ github.base_ref }}
          HEAD_REF=${{ github.head_ref }}

        # 2. Push | workflow_dispatch | 
        # elif [[ "${{ github.event_name }}" == "push" ]]; then

        # 2-1. Push from target branch to target branch
        elif [[ "${{ github.ref_name }}" == "${{ inputs.branch }}" ]]; then
            BASE_REF=${{ inputs.branch }}
            HEAD_REF=${{ inputs.branch }}

          # 2-2. Push from other branch to target branch & other events
          # not supported
        else
          BASE_REF=${{ inputs.branch }}
          HEAD_REF=${{ github.ref_name }}
          echo "Unsupported event: ${{ github.event_name }}"
          echo "Only push and pull_request events are supported"
          exit 1
        fi

        echo "base_ref=$BASE_REF" >> $GITHUB_ENV
        echo "head_ref=$HEAD_REF" >> $GITHUB_ENV
        
    - name: Debug Env
      shell: bash
      run: |
        echo ===========DEBUG ENV===============
        echo "env.base_ref=${{ env.base_ref }}"
        echo "env.head_ref=${{ env.head_ref }}"
        echo "rev-parse inputsbranch=$(git rev-parse ${{ inputs.branch }})"
        echo ===================================

    - name: Get Diff Arguments
      id: diff_args
      shell: bash
      run: |
        git fetch --depth=1 origin ${{ env.ref }} 

        # Check if there are any previous commits
        if git rev-parse --verify HEAD^ &> /dev/null; then
          
          # If this is the first commit, list all files
          diff_args="ls-files"

        elif ${{ github.event_name }} == "pull_request"; then
          diff_args="diff --name-only ${{ github.base_ref }}...${{ github.head_ref }}"
        else 
          diff_args="diff --name-only ${{ github.event.before }} ${{ github.ref_name }}"
        fi

        echo "diff_args=$diff_args" >> $GITHUB_ENV
    - name: Filter files to format & lint
      id: changed_files
      shell: bash
      run: |
        # Filter for Kotlin files
        filtered_changed_files=$(echo ${{ env.changed_files }} | grep -E "\.kt$" || true)

        # Ensure that the value is a single line and format it correctly for GITHUB_ENV
        # //$'\n'/ replaces newlines with spaces
        echo "changed_files=${filtered_changed_files//$'\n'/ }" >> $GITHUB_ENV



    - name: Debug changed files
      shell: bash
      run: |
        echo ========DEBUG CHANGED FILES===========
        echo "changed_files=${{ env.changed_files }}"
        echo ======================================

    - name: Format & Lint code
      shell: bash
      run: |
        echo "${{ env.changed_files }}" | xargs -I {} ./gradlew ktlintCheck --info -PsourceFile={}

    # - name: Lint code
    #   shell: bash
    #   run: |
    #     echo "${{ env.changed_files }}" | xargs -I {} ./gradlew ktlintCheck -PsourceFile={}